name: Build Code and run unit test and SAST, SCA and DAST security scans 
on: 
    workflow_dispatch:
        inputs:
            use-cache:
                type: boolean
                default: true
                description: Whether to execute cache step
            node-version:
                type: choice
                options:
                  - 16.x
                  - 18.x
                  - 20.x
                  - 21.x
                default: 20.x    
                description : Node Version
permissions: 
  id-token: write
  contents: write
jobs:
    # build:
    #     runs-on: ubuntu-latest
    #     outputs:
    #         cache-frontend: ${{ steps.cache-key.outputs.CACHE_KEY_FRONTEND}}
    #         cache-backend: ${{ steps.cache-key.outputs.CACHE_KEY_BACKEND}}
    #     steps:
    #         - name: Clonning the repo 
    #           uses: actions/checkout@v4
             
    #         - name:  Setup Node
    #           uses: actions/setup-node@v4
    #           with:
    #             node-version: ${{ inputs.node-version }}

    #         - name: Calculate cache key
    #           id: cache-key
    #           run: |
    #             echo CACHE_KEY_FRONTEND=deps-node-modules-${{ hashFiles('frontend/package-lock.json') }} >> $GITHUB_OUTPUT
    #             echo CACHE_KEY_BACKEND=deps-node-modules-${{ hashFiles('backend/package-lock.json') }} >> $GITHUB_OUTPUT
    #         - name: Download cached dependencies              
    #           id: cache
    #           if: ${{ inputs.use-cache }}
    #           uses: actions/cache@v3
    #           with:
    #             path: | 
    #               frontend/node_modules
    #               backend/node_modules
    #             key: | 
    #               ${{ steps.cache-key.outputs.CACHE_KEY_FRONTEND }}
    #               ${{ steps.cache-key.outputs.CACHE_KEY_BACKEND }} 

    #         - name: Install deps of frontend
    #           if: steps.cache.outputs.cache-hit != true
    #           run: |
    #             cd frontend
    #             npm install

    #         - name: Install deps of backend
    #           if: steps.cache.outputs.cache-hit != true
    #           run: |
    #               cd backend
    #               npm install
                  
    #         - name: SonarCloud Scan
    #           uses: SonarSource/sonarcloud-github-action@master
    #           env:
    #             GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
    #             SONAR_TOKEN: ${{ secrets.SONNAR_TOKEN2 }}
    # security:
    #     runs-on: ubuntu-latest
    #     needs: build
    #     steps:
    #       - name: Clonning the repo 
    #         uses: actions/checkout@v4

    #       - name: Configure AWS Credentials from AWS account
    #         uses: aws-actions/configure-aws-credentials@v4
    #         with:
    #           role-to-assume:  ${{ secrets.AWS_ROLE }}
    #           aws-region: ${{ secrets.AWS_REGION }}

    #       - name: Download cached dependencies              
    #         id: cache
    #         if: ${{ inputs.use-cache }}
    #         uses: actions/cache@v3
    #         with:
    #             path: |
    #               frontend/node_modules
    #               backend/node_modules
    #             key: |
    #               ${{ needs.build.outputs.cache-frontend }}
    #               ${{ needs.build.outputs.cache-backend }}

    #       - name: Install and run Snyk in frontend 
    #         continue-on-error: true
    #         run: |
    #           cd frontend 
    #           npx snyk test
    #         env:
    #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    #       - name: Install and run Snyk in backend
    #         continue-on-error: true
    #         run: |
    #           cd backend
    #           npx snyk test 
    #         env:
    #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    # Build_Images:
    #     runs-on: ubuntu-latest
    #     steps:
    #       - name: Clonning the repo 
    #         uses: actions/checkout@v4
    #       - name: Configure AWS Credentials from AWS account
    #         id: cred 
    #         uses: aws-actions/configure-aws-credentials@v4
    #         with:
    #           role-to-assume:  ${{ secrets.AWS_ROLE }}
    #           aws-region: ${{ secrets.AWS_REGION }}
    #           output-credentials: true

    #       - name: Build Backend Image and push it to ECR
            
    #         uses: mr-smithers-excellent/docker-build-push@v6
    #         with:
    #           image: backend-image
    #           registry: ${{ secrets.ECR }}  
    #           dockerfile: backend/Dockerfile
    #           tags: ${{ github.run_number }}        
    #         env:
    #           AWS_ACCESS_KEY_ID: ${{ steps.cred.outputs.aws-access-key-id }}
    #           AWS_SECRET_ACCESS_KEY: ${{ steps.cred.outputs.aws-secret-access-key }}
    #           AWS_SESSION_TOKEN: ${{ steps.cred.outputs.aws-session-token }}

    #       - name: Build Frontend Image and push it to ECR
    #         run: |
    #           cd frontend
    #           docker build -t ${{ secrets.ECR }}/backend-image:${{ github.run_number }} .
    #           aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR }}
    #           docker push ${{ secrets.ECR }}/backend-image:${{ github.run_number }}
    # Edit_Deployment_files:
    #   needs: Build_Images
    #   runs-on: ubuntu-latest
    #   steps:
    #   - uses: actions/checkout@v4
    #   - name: Create local changes
    #     run: |
    #       sed -i 's|image:.*|image: ${{ secrets.ECR }}/backend-image:${{ github.run_number }}|g' ./k8s/backend-deployment.yaml
    #       sed -i 's|image:.*|image: ${{ secrets.ECR }}/frontend-image:${{ github.run_number }}|g' ./k8s/frontend-deployment.yaml
    #   - name: Commit files
    #     run: |
    #       git config --local user.email "github-actions.com"
    #       git config --local user.name "github-actions"
    #       git add .
    #       git commit -m "Edit Deployment files with the new images"
          
    #   - name: Push changes
    #     uses: ad-m/github-push-action@master
    #     with:
    #       github_token: ${{ secrets.GITHUB_TOKEN }}
    #       branch: ${{ github.ref }}
    eks-control:
      # needs: Edit_Deployment_files
      runs-on: ubuntu-latest
      steps:
        - name: Clonning the repo 
          uses: actions/checkout@v4
        - name: Configure AWS Credentials from AWS account
          id: cred 
          uses: aws-actions/configure-aws-credentials@v4
          with:
            role-to-assume:  ${{ secrets.AWS_ROLE }}
            aws-region: ${{ secrets.AWS_REGION }}
            output-credentials: true
        
        - name: Generate kubeconfig
          run: |
            {
                echo 'EKS_CREDS<<EOF'
                aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name fp-cluster --dry-run | base64
                echo EOF
            } >> $GITHUB_ENV
        - uses: tale/kubectl-action@v1
          with:
            base64-kube-config: ${{ env.EKS_CREDS }}
        - run: |
            kubectl apply -f ./k8s/backend-deployment.yaml
            kubectl set env deployment/backend-deployment MONGO_DB_URI=${{ secrets.DB_URI }}
            kubectl apply -f ./k8s/frontend-deployment.yaml
            kubectl get all

    # ZAP_scan:
    #     runs-on: ubuntu-latest
    #     needs: security
    #     steps:
    #       - name: Clonning the repo 
    #         uses: actions/checkout@v4

    #       - uses: hoverkraft-tech/compose-action@v1.5.1
    #         with:
    #           compose-file: "docker-compose.yml"
    #         env:
    #           CUSTOM_VARIABLE: "test"

    #       - name: Add a delay to avoid rate limits
    #         run: sleep 30

    #       - name: ZAP Scan
    #         continue-on-error: true
    #         uses: zaproxy/action-api-scan@v0.7.0
    #         with:
    #           token: ${{ secrets.GITHUB_TOKEN }}
    #           docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
    #           target: 'http://localhost:3000'
    #           cmd_options: '-a'