name: Build Code and run unit test and SAST, SCA and DAST security scans 
on: 
    workflow_dispatch:
        inputs:
            use-cache:
                type: boolean
                default: true
                description: Whether to execute cache step
            node-version:
                type: choice
                options:
                  - 16.x
                  - 18.x
                  - 20.x
                  - 21.x
                default: 20.x    
                description : Node Version
            
jobs:
    build:
        runs-on: ubuntu-latest
        outputs:
            cache-frontend: ${{ steps.cache-key.outputs.CACHE_KEY_FRONTEND}}
            cache-backend: ${{ steps.cache-key.outputs.CACHE_KEY_BACKEND}}
        steps:
            - name: Clonning the repo 
              uses: actions/checkout@v4
             
            - name:  Setup Node
              uses: actions/setup-node@v4
              with:
                node-version: ${{ inputs.node-version }}

            - name: Calculate cache key
              id: cache-key
              run: |
                echo CACHE_KEY_FRONTEND=deps-node-modules-${{ hashFiles('frontend/package-lock.json') }} >> $GITHUB_OUTPUT
                echo CACHE_KEY_BACKEND=deps-node-modules-${{ hashFiles('backend/package-lock.json') }} >> $GITHUB_OUTPUT
            - name: Download cached dependencies              
              id: cache
              if: ${{ inputs.use-cache }}
              uses: actions/cache@v3
              with:
                path: | 
                  frontend/node_modules
                  backend/node_modules
                key: | 
                  ${{ steps.cache-key.outputs.CACHE_KEY_FRONTEND }}
                  ${{ steps.cache-key.outputs.CACHE_KEY_BACKEND }} 

            - name: Install deps of frontend
              if: steps.cache.outputs.cache-hit != true
              run: |
                cd frontend
                npm install

            - name: Install deps of backend
              if: steps.cache.outputs.cache-hit != true
              run: |
                  cd backend
                  npm install
                  
            - name: SonarCloud Scan
              uses: SonarSource/sonarcloud-github-action@master
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
                SONAR_TOKEN: ${{ secrets.SONNAR_TOKEN2 }}
    security:
        runs-on: ubuntu-latest
        needs: build
        steps:
          - name: Clonning the repo 
            uses: actions/checkout@v4
          - name: Download cached dependencies              
            id: cache
            if: ${{ inputs.use-cache }}
            uses: actions/cache@v3
            with:
                path: |
                  frontend/node_modules
                  backend/node_modules
                key: |
                  ${{ needs.build.outputs.cache-frontend }}
                  ${{ needs.build.outputs.cache-backend }}

          - name: Install and run Snyk in frontend 
            continue-on-error: true
            run: |
              cd frontend 
              npx snyk test > snyk-report-frontend.json
            env:
              SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

          - name: Install and run Snyk in backend
            continue-on-error: true
            run: |
              cd backend
              npx snyk test > snyk-report-backend.json
            env:
              SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

          - name: Upload Snyk reports
            uses: actions/upload-artifact@v2
            with:
              name: snyk-reports
              path: |
                frontend/snyk-report-frontend.json
                backend/snyk-report-backend.json

    ZAP_scan:
        runs-on: ubuntu-latest
        needs: security
        steps:
          - name: Clonning the repo 
            uses: actions/checkout@v4

          - uses: hoverkraft-tech/compose-action@v1.5.1
            with:
              compose-file: "docker-compose.yml"
            env:
              CUSTOM_VARIABLE: "test"

          - name: Add a delay to avoid rate limits
            run: sleep 30

          - name: ZAP Scan
            continue-on-error: true
            uses: zaproxy/action-api-scan@v0.7.0
            with:
              token: ${{ secrets.GITHUB_TOKEN }}
              docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
              target: 'http://localhost:3000'
              cmd_options: '-a'